import asyncio
import requests
import json
from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import CommandStart, StateFilter, Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, ReplyKeyboardRemove
from datetime import datetime, timedelta


bot = Bot(token = "")
API = "2ce80ab55efff7d78fc31f1868ec0dcf"

dp = Dispatcher()

kb_start = ReplyKeyboardMarkup(
    keyboard=[
        [
            KeyboardButton(text="–£–∑–Ω–∞—Ç—å –ø—Ä–æ–≥–Ω–æ–∑ –ø–æ–≥–æ–¥—ã")
        ],
        [
            KeyboardButton(text="–ï–∂–µ–¥–Ω–µ–≤–Ω–∏–∫")
        ],
    ],
    resize_keyboard=True, input_field_placeholder="–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç"
)

kb_weather = ReplyKeyboardMarkup(
    keyboard=[
        [
            KeyboardButton(text="–£–∑–Ω–∞—Ç—å –∫–∞–∫–æ–π —Å–µ–π—á–∞—Å –ø—Ä–æ–≥–Ω–æ–∑ –ø–æ–≥–æ–¥—ã"),
            KeyboardButton(text="–ü–æ–ª—É—á–∏—Ç—å –±–æ–ª–µ–µ –ø–æ–¥—Ä–æ–±–Ω—ã–π –ø—Ä–æ–≥–Ω–æ–∑ –ø–æ–≥–æ–¥—ã –Ω–∞ —Å–µ–≥–æ–¥–Ω—è")
        ],
        [
            KeyboardButton(text="–£–∑–Ω–∞—Ç—å –ø–æ–≥–æ–¥—É –Ω–∞ –∑–∞–≤—Ç—Ä–∞"),
            KeyboardButton(text="–£–∑–Ω–∞—Ç—å –ø–æ–≥–æ–¥—É –Ω–∞ 5 –¥–Ω–µ–π")
        ],
    ],
    resize_keyboard=True, input_field_placeholder="–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç"
)

del_kbd = ReplyKeyboardRemove()

class AddWeather(StatesGroup):
    city_name = State()
    weather_choise = State()

    texts = {
        'AddWeather:city_name': '–í–≤–µ–¥–∏—Ç–µ –≥–æ—Ä–æ–¥ –∑–∞–Ω–æ–≤–æ:',
        'AddWeather:weather_choise': "–í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–Ω–æ–≤–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–µ–π—Å—Ç–≤–∏—è"
    }

your_city = ""

@dp.message(CommandStart())
async def start(message: types.Message):
    await message.answer("–î–ª—è —Ç–æ–≥–æ —á—Ç–æ–±—ã –≤–µ—Ä–Ω—É—Ç—å—Å—è –∫ –ø—Ä–µ–¥—ã–¥—É—â–µ–º—É —à–∞–≥—É –Ω–∞–ø–∏—à–∏—Ç–µ –≤ —á–∞—Ç–µ —Å–ª–æ–≤–æ –Ω–∞–∑–∞–¥\n–î–ª—è —Ç–æ–≥–æ —á—Ç–æ–±—ã –≤–µ—Ä–Ω—É—Ç—å—Å—è –∫ –º–µ–Ω—é –Ω–∞–ø–∏—à–∏—Ç–µ —Å–ª–æ–≤–æ –æ—Ç–º–µ–Ω–∞ –≤ —á–∞—Ç–µ")
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç:", reply_markup=kb_start)

@dp.message(StateFilter(None), F.text == "–£–∑–Ω–∞—Ç—å –ø—Ä–æ–≥–Ω–æ–∑ –ø–æ–≥–æ–¥—ã")
async def start_weather(message: types.Message, state: FSMContext):
    await message.answer("–ù–∞–ø–∏—à–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞ –∏–ª–∏ –Ω–∞—Å–µ–ª—ë–Ω–Ω–æ–≥–æ –ø—É–Ω–∫—Ç–∞", reply_markup=del_kbd)
    await state.set_state(AddWeather.city_name)

@dp.message(StateFilter('*'), F.text.casefold() == "–æ—Ç–º–µ–Ω–∞")
async def cancel_handler(message: types.Message, state: FSMContext) -> None:
    current_state = await state.get_state()
    if current_state is None:
        return

    await state.clear()
    await message.answer("–î–µ–π—Å—Ç–≤–∏—è –æ—Ç–º–µ–Ω–µ–Ω—ã", reply_markup=kb_start)

@dp.message(StateFilter('*'), F.text.casefold() == "–Ω–∞–∑–∞–¥")
async def back_step_handler(message: types.Message, state: FSMContext) -> None:
    current_state = await state.get_state()

    if current_state == AddWeather.city_name:
        await message.answer('–ü—Ä–µ–¥—ã–¥—É—â–µ–≥–æ —à–∞–≥–∞ –Ω–µ—Ç, –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞ –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ "–æ—Ç–º–µ–Ω–∞"')
        return

    previous = None
    for step in AddWeather.__all_states__:
        if step.state == current_state:
            await state.set_state(previous)
            await message.answer(f"–û–∫, –≤—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –∫ –ø—Ä–æ—à–ª–æ–º—É —à–∞–≥—É \n {AddWeather.texts[previous.state]}")
            return
        previous = step

@dp.message(AddWeather.city_name, F.text)
async def weather_choise(message: types.Message, state: FSMContext):
    your_city = message.text

    for i in your_city:
        if i.isdigit():
            await message.answer("–í—ã –≤–≤–µ–ª–∏ –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞ \n–í–≤–µ–¥–∏—Ç–µ –∑–∞–Ω–æ–≤–æ")
            return

    await message.answer(f"–í—ã –≤—ã–±—Ä–∞–ª–∏ –≥–æ—Ä–æ–¥: {your_city}")
    await state.update_data(city_name=your_city)
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ\n–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ! –ü—Ä–æ–≥–Ω–æ–∑ –ø–æ–≥–æ–¥—ã –Ω–∞ 5 –¥–Ω–µ–π –≤—ã–¥–∞—ë—Ç—Å—è –ø–æ 3 —á–∞—Å–∞\n–ü–æ–¥—Ä–æ–±–Ω—ã–π –ø—Ä–æ–≥–Ω–æ–∑ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è –≤—ã–¥–∞—ë—Ç—Å—è —Ç–∞–∫–∂–µ –Ω–∞ –∫–∞–∂–¥—ã–µ 3 —á–∞—Å–∞", reply_markup=kb_weather)
    await state.set_state(AddWeather.weather_choise)

weather_dictionary = {'Clouds': '‚òÅÔ∏è', 'Rain': 'üåßÔ∏è', 'Clear': '‚òÄÔ∏è', 'Snow': '‚ùÑÔ∏è', 'Fog': 'üå´Ô∏è'}

@dp.message(AddWeather.weather_choise, F.text == "–£–∑–Ω–∞—Ç—å –∫–∞–∫–æ–π —Å–µ–π—á–∞—Å –ø—Ä–æ–≥–Ω–æ–∑ –ø–æ–≥–æ–¥—ã")
async def weather_now(message: types.Message, state: FSMContext):
    data = await state.get_data()
    your_city = data.get("city_name")

    try:
        now = requests.get(f"https://api.openweathermap.org/data/2.5/weather?q={your_city}&appid={API}&units=metric", timeout=10)  # –¢–∞–π–º–∞—É—Ç 10 —Å–µ–∫—É–Ω–¥
        now.raise_for_status()  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –æ—à–∏–±–æ–∫ HTTP
        json_data = now.json()
        temperature = json_data['main']['temp']
        weather_description = json_data['weather'][0]['main']
        emoji = ''

        if weather_description in weather_dictionary:
            emoji = weather_dictionary[weather_description]
        else:
            emoji = weather_description

        await message.answer(f"–ü–æ–≥–æ–¥–∞ —Å–µ–π—á–∞—Å: {temperature}¬∞C {emoji}.", reply_markup=kb_start)

    except requests.exceptions.Timeout:
        await message.answer("–ó–∞–ø—Ä–æ—Å –∫ —Å–µ—Ä–≤–µ—Ä—É –ø—Ä–µ–≤—ã—Å–∏–ª –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
    except requests.exceptions.RequestException as e:
        await message.answer(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∑–∞–ø—Ä–æ—Å–∞: {e}")
    else:
        # –≠—Ç–æ—Ç –±–ª–æ–∫ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è, —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –æ—à–∏–±–æ–∫ –Ω–µ –±—ã–ª–æ
        await state.update_data(weather_choise=message.text)
        data = await state.get_data()  # –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    finally:
        await state.clear()

@dp.message(AddWeather.weather_choise, F.text == "–ü–æ–ª—É—á–∏—Ç—å –±–æ–ª–µ–µ –ø–æ–¥—Ä–æ–±–Ω—ã–π –ø—Ä–æ–≥–Ω–æ–∑ –ø–æ–≥–æ–¥—ã –Ω–∞ —Å–µ–≥–æ–¥–Ω—è")
async def weather_now_in_detail(message: types.Message, state: FSMContext):
    data = await state.get_data()
    your_city = data.get("city_name")

    try:
        today_now = requests.get(f"https://api.openweathermap.org/data/2.5/forecast?q={your_city}&appid={API}&units=metric", timeout=10)  # –¢–∞–π–º–∞—É—Ç 10 —Å–µ–∫—É–Ω–¥
        today_now.raise_for_status()  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –æ—à–∏–±–æ–∫ HTTP

        json_data = today_now.json()
        today = datetime.now()
        day_of_week_today = today.strftime('%A')

        today_weather = []
        formatted_string = "–ü–æ–≥–æ–¥–∞ –ø–æ–¥—Ä–æ–±–Ω–æ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è:\n"
        for item in json_data["list"]:
            dt_value = item["dt"]
            readable_time = datetime.utcfromtimestamp(dt_value).strftime('%d-%m-%Y %H:%M:%S')
            day_of_week = datetime.utcfromtimestamp(dt_value).strftime('%A')
            temperature = item['main']['temp']
            weather_description = item['weather'][0]['main']
            emoji = ''
            if weather_description in weather_dictionary:
                emoji = weather_dictionary[weather_description]
            else:
                emoji = weather_description
            if day_of_week == day_of_week_today:
                daily_weather = [day_of_week, readable_time, "–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞:", temperature, "¬∞C", emoji]
                today_weather.append(daily_weather)
            else:
                break
        for daily_weather in today_weather:
            formatted_string += ' '.join(map(str, daily_weather)) + "\n"
        await message.answer(formatted_string, reply_markup=kb_start)

    except requests.exceptions.Timeout:
        await message.answer("–ó–∞–ø—Ä–æ—Å –∫ —Å–µ—Ä–≤–µ—Ä—É –ø—Ä–µ–≤—ã—Å–∏–ª –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
    except requests.exceptions.RequestException as e:
        await message.answer(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∑–∞–ø—Ä–æ—Å–∞: {e}")
    else:
        # –≠—Ç–æ—Ç –±–ª–æ–∫ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –≤ —Å–ª—É—á–∞–µ —É—Å–ø–µ—à–Ω–æ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –±–ª–æ–∫–∞ try
        await state.update_data(weather_choise=message.text)  # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤—ã–±–æ—Ä–∞ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    finally:
        await state.clear()


@dp.message(AddWeather.weather_choise, F.text == "–£–∑–Ω–∞—Ç—å –ø–æ–≥–æ–¥—É –Ω–∞ –∑–∞–≤—Ç—Ä–∞")
async def weather_tomorrow(message: types.Message, state: FSMContext):
    data = await state.get_data()
    your_city = data.get("city_name")

    try:
        tomorrow_now = requests.get(
            f"https://api.openweathermap.org/data/2.5/forecast?q={your_city}&appid={API}&units=metric", timeout=10)
        tomorrow_now.raise_for_status()
        json_data = tomorrow_now.json()
        today = datetime.now()
        tomorrow = today + timedelta(days=1)
        tomorrow_weather = []
        formatted_string = "–ü–æ–≥–æ–¥–∞ –ø–æ–¥—Ä–æ–±–Ω–æ –Ω–∞ –∑–∞–≤—Ç—Ä–∞:\n"

        for item in json_data["list"]:
            dt_value = item["dt"]
            if tomorrow.date() == datetime.utcfromtimestamp(dt_value).date():
                readable_time = datetime.utcfromtimestamp(dt_value).strftime('%d-%m-%Y %H:%M:%S')
                day_of_week = datetime.utcfromtimestamp(dt_value).strftime('%A')
                temperature = item['main']['temp']
                weather_description = item['weather'][0]['main']
                emoji = ''
                if weather_description in weather_dictionary:
                    emoji = weather_dictionary[weather_description]
                else:
                    emoji = weather_description
                daily_weather = [day_of_week, readable_time, "–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞:", temperature, "¬∞C", emoji]
                tomorrow_weather.append(daily_weather)

        for daily_weather in tomorrow_weather:
            formatted_string += ' '.join(map(str, daily_weather)) + "\n"
        await message.answer(formatted_string, reply_markup=kb_start)

    except requests.exceptions.Timeout:
        await message.answer("–ó–∞–ø—Ä–æ—Å –∫ —Å–µ—Ä–≤–µ—Ä—É –ø—Ä–µ–≤—ã—Å–∏–ª –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
    except requests.exceptions.RequestException as e:
        await message.answer(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∑–∞–ø—Ä–æ—Å–∞: {e}")
    else:
        await state.update_data(weather_choise=message.text)
    finally:
        await state.clear()

@dp.message(AddWeather.weather_choise, F.text == "–£–∑–Ω–∞—Ç—å –ø–æ–≥–æ–¥—É –Ω–∞ 5 –¥–Ω–µ–π")
async def weather_5_days(message: types.Message, state: FSMContext):
    data = await state.get_data()
    your_city = data.get("city_name")

    try:
        now = requests.get(f"https://api.openweathermap.org/data/2.5/forecast?q={your_city}&appid={API}&units=metric",
                           timeout=10)  # –¢–∞–π–º–∞—É—Ç 10 —Å–µ–∫—É–Ω–¥
        now.raise_for_status()  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –æ—à–∏–±–æ–∫ HTTP
        json_data = now.json()

        if json_data.get("cod") != "200":
            await message.answer(f"–û—à–∏–±–∫–∞: {json_data.get('message', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}")  # –°–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
            return

        five_days_weather = []
        formatted_string = "–ü–æ–≥–æ–¥–∞ –Ω–∞ 5 –¥–Ω–µ–π:\n"
        for item in json_data["list"]:
            dt_value = item["dt"]
            readable_time = datetime.utcfromtimestamp(dt_value).strftime('%d-%m-%Y %H:%M:%S')
            day_of_week = datetime.utcfromtimestamp(dt_value).strftime('%A')
            temperature = item['main']['temp']
            weather_description = item['weather'][0]['main']
            emoji = ''
            if weather_description in weather_dictionary:
                emoji = weather_dictionary[weather_description]
            else:
                emoji = weather_description
            daily_weather = [day_of_week, readable_time, "–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞:", temperature, "¬∞C", emoji]
            five_days_weather.append(daily_weather)

        for daily_weather in five_days_weather:
            formatted_string += ' '.join(map(str, daily_weather)) + "\n"
        await message.answer(formatted_string, reply_markup=kb_start)

    except requests.exceptions.Timeout:
        await message.answer("–ó–∞–ø—Ä–æ—Å –∫ —Å–µ—Ä–≤–µ—Ä—É –ø—Ä–µ–≤—ã—Å–∏–ª –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
    except requests.exceptions.RequestException as e:
        await message.answer(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∑–∞–ø—Ä–æ—Å–∞: {e}")
    else:
        # –≠—Ç–æ—Ç –±–ª–æ–∫ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –≤ —Å–ª—É—á–∞–µ —É—Å–ø–µ—à–Ω–æ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –±–ª–æ–∫–∞ try
        await state.update_data(weather_choise=message.text)  # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤—ã–±–æ—Ä–∞ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    finally:
        await state.clear()


async def main():
    await dp.start_polling(bot)
    await bot.delete_webhook(drop_pending_updates=True)

asyncio.run(main())
